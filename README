WarningShot Dependency Resolution Framework
 * Additional documentation @ http://github.com/coryodaniel/warningshot/wikis/

==== How it works
  * WarningShot - Factory class that creates and runs DependencyResolver
  * DependencyResolver - Locates Resolver classes, creates a dependency tree, and matches resolvers to resolution branches
  * Resolver - Class that can be included to create plugins.  Composed of tests and resolutions that can determine if a dependency was met, and if not, how to fix it
  
  
==== Ruby API

  - Configuring WarningShot
  config = WarningShot::Config.new do |c|
    c[:environment]  = 'development'
    c[:resolve]      = false
    c[:config_paths] = ['.'  / 'config' / 'warningshot']
    c[:application]  = '.'
    c[:log_path]     = '.' / 'log' / 'warningshot.log'
    c[:log_level]    = :debug
    c[:growl]        = false
    c[:verbose]      = true
    c[:colorize]     = true
    c[:]
  end
  
  - Interfacing with a DependencyResolver
  dependency_resolver = WarningShot.fire!(config)
  dependency_resolver.stats                       # => Hash of statistics
  
  dependency_resolver.resolvers                   # => Array of all executed resolvers
  
  dependency_resolver.resolvers.first.dependencies #=> Set of all loaded dependencies
  
  dependency_resolver.resolver.first.passed     # => Array of passed dependencies
  dependency_resolver.resolver.first.failed     # => Array of failed dependencies
  dependency_resolver.resolver.first.unresolved # => Array of unresolved dependencies
  dependency_resolver.resolver.first.resolved   # => Array of resolved dependencies
  
  - Callbacks
  WarningShot.before do 
    puts 'this would run before the DepenencyResolver was created in #fire!'
  end
  
  WarningShot.after do
    puts 'this would run after the DepenencyResolver was processed in #fire!'
  end
  
  WarningShot::AnyResolverYouWant.before :test do
    puts 'this would run before the #test! method on the chosen resolver'
  end
  
  WarningShot::AnotherFunResolver.after :test do
    puts 'this would run after the #test! method'
  end
  
  WarningShot::AnotherResolver.before :resolution do
    puts 'this would run before the #resolve! method'
  end
  
  WarningShot::AnotherResolver.after :resolution do
    puts 'this would run after the #resolve! method'
  end
  
==== Components
 * Ruby API
 * Resolvers
 * Config Files
 
 
==== Using Config Files
 * Coming Soon

 
==== How the dependency tree works
 * Coming Soon


==== Extending WarningShot
 * Writing a Resolver (Coming Soon)
 * Modifying Resolvers at run-time (Coming Soon)


==== Contributing
 * Source available @: 
    https://github.com/coryodaniel/warningshot/tree
 
 * Bug reports / feature requests @:
    http://warningshot.lighthouseapp.com/projects/17241-warningshot/overview
 
 * Online Documentation available @:
    http://github.com/coryodaniel/warningshot/wikis
    
 * RubyForge Project @:
    http://rubyforge.org/projects/warning-shot/
 
 * All modifications should also have applicable rpsecs
    http://rspec.info/
    
 * A dummy gem has been created for testing the GemResolver
    https://rubyforge.org/projects/ws-dummy/
    http://github.com/coryodaniel/ws-dummy/tree/master
    gem install ws-dummy
 
 * All code should be documented using YARD
    http://yard.rubyforge.org/
    A template is available file://./yardoc_template.txt
    Generate Yardoc with: yardoc --output-dir ./doc/yard --private --protected --readme README